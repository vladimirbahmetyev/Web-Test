{"version":3,"sources":["Components/Input/Input.js","Components/Login/Login.js","Components/UserItem/UserItem.js","Components/UsersList/UsersList.js","Components/Edit/Edit.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","name","inputName","onChange","type","value","className","e","target","Login","useState","login","setLogin","password","setPassword","setKey","onClick","length","fetch","method","credentials","headers","body","JSON","stringify","username","then","response","json","data","token","alert","UserItem","first_name","last_name","id","is_active","UsersList","user_list","List","setList","curFilter","setFilter","curSort","setSort","handleSortChange","sortType","changeList","tempList","Object","assign","filter","item","toLowerCase","indexOf","sort","first","second","checked","map","key","Edit","setUsername","firstName","setFirstName","lastName","setLastName","passwordCheck","setPasswordCheck","oldUserName","setOldUsername","currentMode","setCurrentMode","apiKey","userList","reloadList","passRegExp","userNameRegExp","isFormValid","match","userNameList","user","clickedMode","navPanelNodes","document","querySelector","childNodes","forEach","node","classList","remove","add","newUser","status","patchedUserId","tempUser","deleteUser","deleteUserId","App","ApiKey","setApiKey","setUserList","currentTask","setCurrentTask","loadUserList","console","log","clickedTask","carusel","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9c06f4a8.chunk.js","sourcesContent":["import React  from 'react';\r\nimport \"./Input.css\"\r\n\r\nexport default function Input(props) {\r\n    const {name, inputName, onChange, type, value} = props\r\n    return(\r\n        <div className=\"input\">\r\n            <label className=\"input__label\">\r\n                <div className=\"input__text\">{inputName}</div>\r\n                <input \r\n                    value={value}\r\n                    type={type || 'text'}\r\n                    name={name}\r\n                    className=\"input__pure-input\"\r\n                    onChange={e => onChange(e.target.value)}\r\n                    />                \r\n            </label>\r\n        </div>\r\n    )    \r\n}","import React, {useState} from \"react\"\r\nimport Input from \"../Input/Input\"\r\n\r\nimport \"./Login.css\"\r\n\r\nexport default function Login(props) {\r\n\r\n    const [login, setLogin] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const {setKey} = props\r\n\r\n    let sendForm = ()=>{\r\n        if(login.length === 0 || password.length ===0){\r\n            alert(\"Логин или пароль не могут быть пустыми\")\r\n            return\r\n        }\r\n        fetch(\"https://emphasoft-test-assignment.herokuapp.com/api-token-auth/\",{\r\n            method: \"POST\",\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                username: login,\r\n                password: password\r\n            })\r\n        }\r\n        )\r\n        .then(response => response.json())\r\n        .then(data => setKey(data.token))\r\n    }\r\n\r\n    return(\r\n        <div className=\"login\">\r\n            <Input inputName=\"Login:\" name=\"login\" onChange={setLogin} type=\"login\" value={login}/>\r\n            <Input inputName=\"Password:\" name=\"password\" onChange={setPassword} type=\"password\" value={password}/>\r\n            <button type='submit' className=\"login__button\" onClick={sendForm}>Войти</button>\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport \"./UserItem.css\"\r\n\r\nexport default function UserItem(props) {\r\n    const {username, first_name, last_name, id, is_active} = props\r\n    return(\r\n    <div className=\"user-item\">\r\n        <div className=\"user-item__name-container\">\r\n            <div className=\"user-item__user-name\">{username}</div>\r\n            <div className=\"user-item__full-name\">{`${first_name} ${last_name}`}</div>\r\n        </div>\r\n        <div className=\"user-item__additional-container\">\r\n            <div className={`user-item__is-activ ${is_active? \"green-text\":\"gray-text\"}`}>\r\n                {is_active? \"Active\" : \"Not Active\"}\r\n            </div>\r\n            <div className=\"user-item__id\">\r\n                {`id: ${id}`}\r\n            </div>\r\n        </div>\r\n    </div>)\r\n}","import React, {useState} from \"react\"\r\nimport UserItem from \"../UserItem/UserItem\"\r\nimport \"./UsersList.css\"\r\nimport Input from \"../Input/Input\"\r\n\r\nexport default function UsersList(props) {\r\n    const {user_list} = props\r\n    const [List, setList] = useState(user_list)\r\n    const [curFilter, setFilter] = useState(\"\");\r\n    const [curSort, setSort] = useState(\"none\")\r\n\r\n    let handleSortChange = (e) =>{\r\n        let sortType = e.target.value\r\n        setSort(sortType)\r\n        changeList(sortType, curFilter)\r\n    }\r\n\r\n    let handleFilterChange = (curFilter) =>{\r\n        setFilter(curFilter)\r\n        changeList(curSort, curFilter)\r\n    }\r\n\r\n    let changeList = (curSort, curFilter)=>{\r\n        let tempList = []\r\n        Object.assign(tempList, user_list)\r\n        if(curFilter.length !== 0){\r\n            tempList = tempList.filter(item => item['username']\r\n                                                .toLowerCase()\r\n                                                .indexOf(curFilter.toLowerCase())\r\n                                                !== -1)\r\n        }\r\n        if(curSort === 'inc'){\r\n            tempList = tempList.sort((first,second) => first.id > second.id? 1 : -1)\r\n        }\r\n        if(curSort === 'decr'){\r\n            tempList = tempList.sort((first,second) => first.id < second.id? 1 : -1)\r\n        }\r\n        setList(tempList)\r\n    }\r\n\r\n    return(\r\n    <div className=\"users-list\">\r\n        <div className=\"show-option__containter\">\r\n            <Input type=\"text\"name=\"filter\" inputName=\"Поиск по username\" onChange = {handleFilterChange}/>\r\n            <div className=\"option__container\">\r\n                <div className=\"show-option__sort\" >\r\n                    <label> \r\n                        <input \r\n                        type=\"checkbox\" \r\n                        value=\"inc\" \r\n                        checked={curSort === \"inc\"}\r\n                        onChange={handleSortChange}/>\r\n                        Сортировать по возрастанию id\r\n                    </label>\r\n                </div>\r\n                <div className=\"show-option__sort\">\r\n                    <label> \r\n                        <input \r\n                        type=\"checkbox\"\r\n                        value=\"decr\"\r\n                        checked={curSort === \"decr\"}\r\n                        onChange={handleSortChange}/>\r\n                        Сортировать по убыванию id\r\n                    </label>\r\n                </div>\r\n\r\n                <div className=\"show-option__sort\">\r\n                    <label> \r\n                        <input \r\n                        type=\"checkbox\"\r\n                        value=\"none\"\r\n                        checked={curSort === \"none\"}\r\n                        onChange={handleSortChange}/>\r\n                        Не сортировать\r\n                    </label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <ul className=\"users-list__container\">\r\n            {List.map(item => <li key={item.id} className=\"users-list__item\"><UserItem {...item}/></li>)}\r\n        </ul>\r\n    </div>)\r\n}","import React, {useState} from 'react'\r\nimport \"./Edit.css\"\r\n\r\nimport Input from \"../Input/Input\"\r\n\r\nexport default function Edit(props) {\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [firstName, setFirstName] = useState(\"\");\r\n    const [lastName, setLastName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [passwordCheck, setPasswordCheck] = useState(\"\");\r\n    const [oldUserName, setOldUsername] = useState(\"\")\r\n\r\n    const [currentMode, setCurrentMode] = useState(\"create\")\r\n\r\n    const {apiKey, userList, reloadList} = props \r\n\r\n    const passRegExp = /^(?=.*[A-Z])(?=.*\\d).{8,}$/\r\n    const userNameRegExp = /^[\\w.@+-]+$/\r\n\r\n    let modeHandler = (e) =>{\r\n        let clickedMode = e.target.value\r\n        if(clickedMode === currentMode){\r\n            return\r\n        }\r\n        \r\n        let navPanelNodes = document.querySelector(\".edit__nav-panel\").childNodes\r\n        navPanelNodes.forEach(node => node.classList.remove(\"active_button\"))\r\n        navPanelNodes.forEach(node => {\r\n            if(node.value === clickedMode){\r\n                node.classList.add(\"active_button\")\r\n            }\r\n        })\r\n        setCurrentMode(clickedMode)\r\n    }\r\n\r\n    let isFormValid = () => {\r\n        if(password !== passwordCheck){\r\n            alert(\"Пароли не совпадают!\")\r\n            return false\r\n        }                \r\n        \r\n        if(passwordCheck.match(passRegExp) === null){\r\n            alert(\"Пароль должен состоять минимум из 8 символов и включать одну заглавную, строчную букву и одну цифру\")\r\n            return false\r\n        }\r\n\r\n        if(passwordCheck.length === 0 || passwordCheck.length > 128){\r\n            alert(\"Длина пароля должна быть от 1 до 128 символов\")\r\n            return false\r\n        }\r\n\r\n        if(currentMode===\"create\"){\r\n            let userNameList = userList.map(user=> user.username)\r\n            if(username.match(userNameRegExp) === null || userNameList.indexOf(username) !== -1){\r\n                alert(\"Вы не можете выбрать данное имя\")\r\n                return false\r\n            }\r\n        }\r\n\r\n        if( firstName.length > 30){\r\n            alert(\"Имя не может быть длиннее 30 символов\")\r\n            return false\r\n        }\r\n        if( firstName.length > 150){\r\n            alert(\"Фамилия не может быть длиннее 150 символов\")\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    let submitHandler = ()=>{\r\n        if(currentMode===\"create\"){\r\n\r\n            if(!isFormValid()){\r\n                return\r\n            }\r\n            \r\n            let newUser = {\r\n                username: username,\r\n                first_name: firstName,\r\n                last_name: lastName,\r\n                password: password,\r\n                is_active: \"true\"\r\n            }\r\n        fetch(\"https://emphasoft-test-assignment.herokuapp.com/api/v1/users/\", {\r\n            method: \"POST\",\r\n            credentials: 'same-origin',\r\n            headers:{\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Token ${apiKey}`\r\n            },\r\n            body: JSON.stringify(newUser) \r\n        })\r\n        .then(response =>{\r\n            if(response.status ===201){\r\n                reloadList()\r\n                alert(\"Вы успешно создали пользователя\")\r\n                return response.json()\r\n            }\r\n        } )\r\n        }\r\n\r\n        if(currentMode===\"edit\"){\r\n            let patchUser = userList.filter(user => user.username === oldUserName)[0]\r\n            let patchedUserId = patchUser.id\r\n            if(!isFormValid()){\r\n                return\r\n            }\r\n            \r\n            let tempUser = {\r\n                username: username,\r\n                first_name: firstName,\r\n                last_name: lastName,\r\n                password: password,\r\n                is_active: \"true\"\r\n            }\r\n            fetch(`https://emphasoft-test-assignment.herokuapp.com/api/v1/users/${patchedUserId}/`, {\r\n                method: \"PATCH\",\r\n                credentials: 'same-origin',\r\n                headers:{\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Token ${apiKey}`\r\n                },\r\n                body: JSON.stringify(tempUser) \r\n            })\r\n            .then(response =>{\r\n                if(response.status ===200){\r\n                    reloadList()\r\n                    alert(\"Вы успешно изменили пользователя\")\r\n                    return response.json()\r\n                }\r\n            } )\r\n        }\r\n\r\n        if(currentMode===\"delete\"){\r\n            let deleteUser = userList.filter(user => user.username === oldUserName)[0]\r\n            let deleteUserId = deleteUser.id\r\n\r\n            let tempUser = {\r\n                username: deleteUser.username,\r\n                first_name: deleteUser.firstName,\r\n                last_name: deleteUser.lastName,\r\n                password: deleteUser.password,\r\n                is_active: \"false\"\r\n            }\r\n            fetch(`https://emphasoft-test-assignment.herokuapp.com/api/v1/users/${deleteUserId}/`, {\r\n                method: \"PATCH\",\r\n                credentials: 'same-origin',\r\n                headers:{\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Token ${apiKey}`\r\n                },\r\n                body: JSON.stringify(tempUser) \r\n            })\r\n            .then(response =>{\r\n                if(response.status ===200){\r\n                    reloadList()\r\n                    alert(\"Вы успешно удалили пользователя\")\r\n                    return response.json()\r\n                }\r\n            } )\r\n        }\r\n    }\r\n\r\n    return(\r\n    <div className=\"edit\">\r\n        <div className=\"edit__nav-panel\" onClick={modeHandler}>\r\n            <button value=\"create\" className=\"edit__button login__button active_button\">\r\n                Создать пользователя\r\n            </button>\r\n            <button value=\"edit\" className=\"edit__button login__button\">\r\n                Изменить пользователя\r\n            </button>\r\n            <button value=\"delete\"className=\"edit__button login__button\">\r\n                Удалить пользователя\r\n            </button>\r\n        </div>\r\n        {currentMode=== \"create\"? <div className=\"edit__form\">            \r\n            <Input type=\"text\" name=\"edit__user-name\" inputName=\"Username\"onChange={setUsername} value={username}/>\r\n            <Input type=\"text\" name=\"edit__first-name\" inputName=\"Имя\"onChange={setFirstName} value={firstName}/>\r\n            <Input type=\"text\" name=\"edit__last-name\" inputName=\"Фамилия\"onChange={setLastName} value={lastName}/>\r\n            <Input type=\"password\" name=\"edit__password\" inputName=\"Пароль\"onChange={setPassword} value={password}/>\r\n            <Input type=\"password\" name=\"edit__password-check\" inputName=\"Повторите пароль\"onChange={setPasswordCheck} value={passwordCheck}/>\r\n        </div>:\r\n        currentMode===\"edit\" ?\r\n         <div className=\"edit__form\">            \r\n            <Input type=\"text\" name=\"edit__user-name\" inputName=\"Старый username\"onChange={setOldUsername} value={oldUserName}/>\r\n            <Input type=\"text\" name=\"edit__user-name\" inputName=\"Новый username\"onChange={setUsername} value={username}/>\r\n            <Input type=\"text\" name=\"edit__first-name\" inputName=\"Новое Имя\"onChange={setFirstName}value={firstName}/>\r\n            <Input type=\"text\" name=\"edit__last-name\" inputName=\"Новая Фамилия\"onChange={setLastName} value={lastName}/>\r\n            <Input type=\"password\" name=\"edit__password\" inputName=\"Новый пароль\"onChange={setPassword} value={password}/>\r\n            <Input type=\"password\" name=\"edit__password-check\" inputName=\"Подтвердите новый пароль\"onChange={setPasswordCheck} value={passwordCheck}/>\r\n        </div>:\r\n        currentMode ===\"delete\" ? \r\n        <div className=\"edit__form\">            \r\n            <Input type=\"text\" name=\"edit__user-name\" inputName=\"Пользователь, которого вы хотите удалить\"onChange={setOldUsername} value={oldUserName}/>\r\n        </div> : <></>}\r\n        <button className=\"edit__button login__button\" type=\"submit\" onClick={submitHandler}>Подтвердить</button>\r\n    </div>\r\n    )    \r\n}","import React, {useState} from 'react';\nimport Login from \"./Components/Login/Login\"\nimport UserList from \"./Components/UsersList/UsersList\"\nimport Edit from \"./Components/Edit/Edit\"\n\nimport './App.css';\n\nfunction App() {\n\n  const [ApiKey, setApiKey] = useState(\"\");\n  const [userList, setUserList] = useState([])\n  const [currentTask, setCurrentTask] = useState(\"first\")\n\n  const clickTaskHandler = (e) =>{\n    let clickedTask = e.target.value\n    if(clickedTask === currentTask){\n        return\n    }\n    \n    let navPanelNodes = document.querySelector(\".app__task-nav\").childNodes\n    navPanelNodes.forEach(node => node.classList.remove(\"active_button\"))\n    navPanelNodes.forEach(node => {\n        if(node.value === clickedTask){\n            node.classList.add(\"active_button\")\n        }\n    })\n    \n    let carusel = document.querySelector(\".app__carusel\")\n    \n    if(clickedTask === \"first\"){\n      carusel.classList.remove(\"shift\")\n    }\n\n    if(clickedTask === \"second\"){\n      carusel.classList.add(\"shift\")\n    }\n    \n    setCurrentTask(clickedTask)\n}\n\n  const onGetKey = (key)=>{\n    loadUserList(key)\n    setApiKey(key)     \n  }\n\n  const loadUserList = (key = ApiKey) =>{\n    fetch(\"https://emphasoft-test-assignment.herokuapp.com/api/v1/users/\",{\n      headers:{\n        'Authorization': `Token ${key}`\n      }\n    })\n    .then(response => {\n      if( response.status === 200){\n        return response.json()\n      }\n      else{\n        console.log(`Error: ${response.status}`)\n      }\n    })\n    .then(userList => {\n      console.log(\"Подгружаю список\")\n      setUserList(userList) \n    })\n  }\n\n  return (\n    <div className=\"App\">\n      {userList.length === 0?\n      <Login setKey={onGetKey}/>\n      :\n      <div className=\"app__task-container\">\n          <div className=\"app__task-nav\" onClick={clickTaskHandler}>\n            <button value=\"first\" className=\"edit__button login__button active_button\">\n              Задание 1\n            </button>\n            <button value=\"second\" className=\"edit__button login__button\">\n              Задание 2\n            </button>\n          </div>\n          <div className=\"app__carusel\">\n            <div className=\"app__carusel__item\">\n              <UserList user_list={userList}/>\n            </div>\n            <div className=\"app__carusel__item\">\n              <Edit apiKey={ApiKey} userList={userList} reloadList={loadUserList}/>\n            </div>\n          </div>\n      </div>}      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}